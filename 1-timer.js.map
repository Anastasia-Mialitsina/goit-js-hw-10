{"version":3,"file":"1-timer.js","sources":["../src/js/1-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\n\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\n// flatpickr //\nconst datetimePicker = document.querySelector(\"#datetime-picker\");\nconst startButton = document.querySelector(\"button[data-start]\");\nlet userSelectedDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    const selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      startButton.disabled = true;\n      iziToast.error({\n        title: \"Error\",\n        message: \"Please choose a date in the future\",\n      });\n    } else {\n      startButton.disabled = false;\n      userSelectedDate = selectedDate;\n    }\n  },\n};\n\nflatpickr(datetimePicker, options);\n\n// start //\nlet timerInterval = null;\n\nstartButton.addEventListener(\"click\", () => {\n  startButton.disabled = true;\n  datetimePicker.disabled = true;\n\n  timerInterval = setInterval(() => {\n    const currentTime = new Date();\n    const timeDiff = userSelectedDate - currentTime;\n\n    if (timeDiff <= 0) {\n      clearInterval(timerInterval);\n      iziToast.success({\n        title: \"Done\",\n        message: \"Countdown finished!\",\n      });\n      datetimePicker.disabled = false;\n      return;\n    }\n\n    updateTimerUI(convertMs(timeDiff));\n  }, 1000);\n});\n\n// time //\nfunction updateTimerUI({ days, hours, minutes, seconds }) {\n  document.querySelector(\"[data-days]\").textContent = addLeadingZero(days);\n  document.querySelector(\"[data-hours]\").textContent = addLeadingZero(hours);\n  document.querySelector(\"[data-minutes]\").textContent =\n    addLeadingZero(minutes);\n  document.querySelector(\"[data-seconds]\").textContent =\n    addLeadingZero(seconds);\n}\n\nfunction addLeadingZero(value) {\n  return String(value).padStart(2, \"0\");\n}\n\n// convertMs //\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n"],"names":["datetimePicker","startButton","userSelectedDate","options","selectedDates","selectedDate","iziToast","flatpickr","timerInterval","timeDiff","updateTimerUI","convertMs","days","hours","minutes","seconds","addLeadingZero","value","ms"],"mappings":"0FAOA,MAAMA,EAAiB,SAAS,cAAc,kBAAkB,EAC1DC,EAAc,SAAS,cAAc,oBAAoB,EAC/D,IAAIC,EAAmB,KAEvB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrB,MAAMC,EAAeD,EAAc,CAAC,EAChCC,GAAgB,IAAI,MACtBJ,EAAY,SAAW,GACvBK,EAAS,MAAM,CACb,MAAO,QACP,QAAS,oCACjB,CAAO,IAEDL,EAAY,SAAW,GACvBC,EAAmBG,EAEtB,CACH,EAEAE,EAAUP,EAAgBG,CAAO,EAGjC,IAAIK,EAAgB,KAEpBP,EAAY,iBAAiB,QAAS,IAAM,CAC1CA,EAAY,SAAW,GACvBD,EAAe,SAAW,GAE1BQ,EAAgB,YAAY,IAAM,CAEhC,MAAMC,EAAWP,EADG,IAAI,KAGxB,GAAIO,GAAY,EAAG,CACjB,cAAcD,CAAa,EAC3BF,EAAS,QAAQ,CACf,MAAO,OACP,QAAS,qBACjB,CAAO,EACDN,EAAe,SAAW,GAC1B,MACD,CAEDU,EAAcC,EAAUF,CAAQ,CAAC,CAClC,EAAE,GAAI,CACT,CAAC,EAGD,SAASC,EAAc,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CACxD,SAAS,cAAc,aAAa,EAAE,YAAcC,EAAeJ,CAAI,EACvE,SAAS,cAAc,cAAc,EAAE,YAAcI,EAAeH,CAAK,EACzE,SAAS,cAAc,gBAAgB,EAAE,YACvCG,EAAeF,CAAO,EACxB,SAAS,cAAc,gBAAgB,EAAE,YACvCE,EAAeD,CAAO,CAC1B,CAEA,SAASC,EAAeC,EAAO,CAC7B,OAAO,OAAOA,CAAK,EAAE,SAAS,EAAG,GAAG,CACtC,CAGA,SAASN,EAAUO,EAAI,CAMrB,MAAMN,EAAO,KAAK,MAAMM,EAAK,KAAG,EAC1BL,EAAQ,KAAK,MAAOK,EAAK,MAAO,IAAI,EACpCJ,EAAU,KAAK,MAAQI,EAAK,MAAO,KAAQ,GAAM,EACjDH,EAAU,KAAK,MAASG,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAN,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC"}